#+TITLE: Formal verification of the LibraBFT consensus algorithm
#+SUBTITLE: An overview of proving contracts for peer handlers
#+AUTHOR: Chris Jenkins
#+DATE: 2021 Aug 11

* Metadata

  This file was written with respect to the following commit hash of the
  repository:
  - bf83f206aec53b2f7abd3a92293ca1ac722bf6eb

* Structure of peer handler proofs

  In both the Haskell prototype and Agda model, peer handler code is written in
  the =RWST= --- /reader, writer, state/ --- and =EitherD= monads. Unlike the
  Haskell code, in Agda, these monads are [[file:../LibraBFT/ImplShared/Util/RWST.agda::data RWST (Ev Wr St : Set) : Set → Set₁ where][defined as a special-purpose datatypes]]
  (in , defined in
  ~LibraBFT.ImplShared.Util.Dijkstra.RWST~ and ~LibraBFT.ImplShared.Util.Dijkstra.EitherD~, respectively).
  This allows proofs to inspect the AST of peer handler code directly.

  For =RWST=, this is primarily used to compute, for any
  postcondition =Q : (Wr St A : Set) -> Set= and peer handler =h : RWST Wr St
  A=, the weakest precondition =RWST-weakestPre m Q= which can be used to prove
  =Q=. This is based on Dijsktra's weakest precondition calculus and the work by
  Swamy et al. on the [[file:../LibraBFT/ImplShared/Util/RWST.agda::{- Byzantine Fault Tolerant Consensus Verification in Agda, version 0.9.][Dijkstra monad]]. Phrasing properties about peer handlers as
  preconditions has a number of benefits, described below.


** Dijkstra's weakest precondition calculus

   [[file:../LibraBFT/ImplShared/Util/Dijkstra/RWST.agda]]

   There are two kinds of constructors of the Agda =RWST= monad: primitives
   needed to support the desired functionality, and conveniences that allow us
   to define custom proof obligations for branching code.

   #+begin_src agda
-- RWST, the AST of computations with state `St` reading from an environment
-- `Ev` and producing a list of outputs of type `Wr`
data RWST (Ev Wr St : Set) : Set → Set₁ where
  -- Primitive combinators
  RWST-return : ∀ {A}   → A                                     → RWST Ev Wr St A
  RWST-bind   : ∀ {A B} → RWST Ev Wr St A → (A → RWST Ev Wr St B) → RWST Ev Wr St B
  RWST-gets   : ∀ {A} → (St → A)                                → RWST Ev Wr St A
  RWST-put    : St                                              → RWST Ev Wr St Unit
  RWST-ask    :                                                   RWST Ev Wr St Ev
  RWST-tell   : List Wr                                         → RWST Ev Wr St Unit

  -- Branching combinators (used for creating more convenient contracts)
  RWST-if     : ∀ {A} → Guards (RWST Ev Wr St A)                → RWST Ev Wr St A
  RWST-either : ∀ {A B C} → Either B C
               → (B → RWST Ev Wr St A) → (C → RWST Ev Wr St A)   → RWST Ev Wr St A
  RWST-ebind  : ∀ {A B C}
               → RWST Ev Wr St (Either C A)
               → (A → RWST Ev Wr St (Either C B))               → RWST Ev Wr St (Either C B)
  RWST-maybe  : ∀ {A B} → Maybe B
               → (RWST Ev Wr St A) → (B → RWST Ev Wr St A)       → RWST Ev Wr St A
   #+end_src

   There are two steps in the development for the weakest precondition calculus.

*** Computing the weakest precondition

    From a peer handler =m= and postcondition =P= we compute (using a large
    elimination) a precondition =RWST-weakestPre m P=.

    - This is easy to see for =RWST-pure=

        #+begin_src agda
RWST-weakestPre (RWST-return x) P ev pre = P x pre []
        #+end_src

      That is, the post condition must already hold for the returned value and
      prestate with no outputs. Here, =ev= is the environment we read from and
      =pre= is the prestate.

    - The case for =RWST-bind= is trickier

        #+begin_src agda
RWST-weakestPre (RWST-bind m f) P ev pre =
  RWST-weakestPre m (RWST-weakestPre-bindPost ev f P) ev pre
{- ... -}

RWST-Post++ P outs x post outs₁ = P x post (outs ++ outs₁)

RWST-weakestPre-bindPost ev f P x post outs =
  ∀ r → r ≡ x → RWST-weakestPre (f r) (RWST-Post++ P outs) ev post
        #+end_src

      - We want the weakest precondition for =m= of a postcondition for =m= that
        will guarantee that running =f= on the result of =m= gives us the
        desired final postcondition =P= of =RWST-bind m f=.

        The postcondition of =m= which is also the precondition for running
        =f= on the result of =m= is =RWST-weakestPre-bindPost ev f P=

      - In =RWST-weakestPre-bindPost=, =x= is the result of running =m=, =post=
        is the poststate, and =outs= is the list of outputs =m= generated.

      - We introduce a new variable =r= to serve as an alias for the result
        =x=.

        In proofs, the variable =x= may be instantiated with some very large
        and complicated expression, and substituting it directly into the
        desired precondition could cause the proof state to become quite
        unreadable. Introducing an alias allows the prover (e.g., you!) to use
        the same name as used in the peer handler code itself, and only reveal
        what it actually computes to where that information is needed.

      - Finally, we want the weakest precondition of =P= for =f r=, but now
        =P= must hold not only for the outputs of =f r= but also the
        previously generated outputs, =outs=.

        We therefore use the helper function =RWST-Post++=.

    - Now we look at a case for one of the "convenience" constructors ---
      =RWST-maybe=

      #+begin_src agda
RWST-weakestPre (RWST-maybe m f₁ f₂) P ev pre =
  (m ≡ nothing → RWST-weakestPre f₁ P ev pre)
  × (∀ j → m ≡ just j → RWST-weakestPre (f₂ j) P ev pre)
      #+end_src

      - Here, we decompose the precondition into two subgoals: one where
        =m : Maybe A= is =nothing= (and so we need that the weakest precondition
        of =P= holds for =f₁=) and one where there is a =j= such that =m ≡ just
        j=.

      - By phrasing it this way, we get help from Agda: in proofs, instead of
        having to do case analysis on =m= ourselves (which might be quite a
        complicated expression), Agda can automatically refine (using =C-c C-r=,
        or =C-c C-c= for copattern matching) the goal to these two subgoals when
        the expression we are considering is formed by =RWST-maybe=

*** Proving a contract from its weakest precondition

    For the top-level peer handlers (process proposal, process vote), once we
    have proven the weakest precondition for the desired postcondition, the next
    step is to use this to extract that post condition. This is done with
    =RWST-contract= below:

    #+begin_src agda
RWST-Post-True : (P : RWST-Post Wr St A) (m : RWST Ev Wr St A) (ev : Ev) (pre : St) → Set
RWST-Post-True P m ev pre =
  let (x , post , outs) = RWST-run m ev pre in
  P x post outs

RWST-Contract : (m : RWST Ev Wr St A) → Set₁
RWST-Contract{Ev}{Wr}{St}{A} m =
  (P : RWST-Post Wr St A)
  → (ev : Ev) (pre : St) → RWST-weakestPre m P ev pre
  → RWST-Post-True P m ev pre

RWST-contract : (m : RWST Ev Wr St A) → RWST-Contract m
    #+end_src

    1. =RWST-Post-True= says what it means for a post condition =P= to be
       true of a peer handler =m= running in environment =ev= with prestate =pre=

    2. =RWST-Contract= is the statement that it suffices to show the weakest
       precondition of =P= for =m= if you want that the =P= holds for =m=

    3. =RWST-contract= is the proof of the above statement


    There is an example of using =RWST-contract= in
    [[file:../LibraBFT/Impl/IO/OBM/InputOutputHandlers.agda]].  (Note that `LBFT`, defined in
    ~LibraBFT.ImplShared.Util.Util~ is `RWST` instantiated with the types used to express our Agda
    implementation of `LibraBFT`; for convenience, we often have `LBFT` variants of `RWST`
    definitions and proofs.)

*** Postcondition implication

    Sometimes when proving a precondition, it is convenient to show
    directly that one postcondition implies another. For example, suppose we
    have peer handlers =foo=, =bar=, and =baz=, we have proved =ContractFoo=
    and =ContractBar=, and we are trying to prove =ContractBaz= where =baz= is:

    #+begin_src haskell
      baz = do
        x ← foo
        bar x
    #+end_src

    We may wish to show that =ContractFoo= implies the postcondition
    =RWST-weakestPre-bindPost ev bar ContractBaz=. The lemma =RWST-⇒= serves
    just this purpose.

    #+begin_src agda
RWST-Post-⇒ : (P Q : RWST-Post Wr St A) → Set
RWST-Post-⇒ P Q = ∀ r st outs → P r st outs → Q r st outs

-- This helper function is primarily used to take a proof concerning one
-- computation `m` and show that that proof implies a property concerning a
-- larger computation that contains `m`.
RWST-⇒
  : (P Q : RWST-Post Wr St A) → (RWST-Post-⇒ P Q)
    → ∀ m (ev : Ev) st → RWST-weakestPre m P ev st → RWST-weakestPre m Q ev st
    #+end_src

    This is such a common pattern that contracts for
    non-toplevel handlers should generally be formulated for
    arbitrary postconditions (=pre= is a module parameter):

    #+begin_src agda
    contract' : LBFT-weakestPre baz ContractBaz pre

    contract : ∀ Post → (RWST-Post-⇒ ContractBaz Post) → LBFT-weakestPre baz Post pre
    contract Post pf = LBFT-⇒ ContractBaz Post pf baz pre contract'
    #+end_src

** Peer handler proofs
*** Breaking the peer handler down into smaller "steps"

    When beginning to prove a contract for a peer handler, it is often
    useful to break the handler into smaller steps, for two reasons:
    1. It helps to declutter the proof state, so you can orient yourself on what
       you still need to show.

    2. It allows you to break the proof down into smaller pieces as well, making
       it more readable. The types of these smaller proofs will mention the code
       that remains to execute, so save yourself some typing by using
       short names like =step3 <args>=.


    Let's look at =ensureRoundAndSyncUpM= as an example.

    #+begin_src agda
module ensureRoundAndSyncUpM
  (now : Instant) (messageRound : Round) (syncInfo : SyncInfo) (author : Author) (helpRemote : Bool) where
  step₀ : LBFT (Either ErrLog Bool)
  step₁ : LBFT (Either ErrLog Bool)
  step₂ : LBFT (Either ErrLog Bool)

  step₀ = do
    currentRound ← use (lRoundState ∙ rsCurrentRound)
    ifD messageRound <? currentRound
      then ok false
      else step₁

  step₁ =
        syncUpM now syncInfo author helpRemote ∙?∙ λ _ → step₂

  step₂ = do
          currentRound' ← use (lRoundState ∙ rsCurrentRound)
          ifD messageRound /= currentRound'
            then bail fakeErr -- error: after sync, round does not match local
            else ok true

ensureRoundAndSyncUpM = ensureRoundAndSyncUpM.step₀
    #+end_src

    Generally speaking, it's good to choose the boundaries of these steps around
    any point that branches, and at any point where another function is called
    (such as =syncUpM=) so you can use the contract for that function to "move"
    to the next step. This is shown below for a part of the proof of the
    contract for =ensureRoundAndSyncUpM= (found in [[file:../LibraBFT/Impl/Consensus/RoundManager/Properties.agda]]):

**** Standard setup for contracts

     For formulating and proving peer handler contracts, the preferred style is
     to create a module specifically for that peer handler (in a separate
     =Properties.agda= file) with the suffix =Spec=, e.g., =ensureRoundAndSyncUpMSpec=

     #+begin_src agda
module ensureRoundAndSyncUpMSpec
  (now : Instant) (messageRound : Round) (syncInfo : SyncInfo)
  (author : Author) (helpRemote : Bool) where

  open ensureRoundAndSyncUpM now messageRound syncInfo author helpRemote

  module _ (pre : RoundManager) where

    record Contract (r : Either ErrLog Bool) (post : RoundManager) (outs : List Output) : Set where
      constructor mkContract
      field
        -- General invariants / properties
        rmInv         : Preserves RoundManagerInv pre post
        noEpochChange : NoEpochChange pre post
        noVoteOuts    : OutputProps.NoVotes outs
        -- Voting
        noVote        : VoteNotGenerated pre post true
        -- Signatures
        outQcs∈RM : QCProps.OutputQc∈RoundManager outs post
        qcPost   : QCProps.∈Post⇒∈PreOr (_QC∈SyncInfo syncInfo) pre post
     #+end_src

     From within this module, open the =ensureRoundAndSyncUpM= module and call
     the property that we want to prove =Contract= --- from outside the module,
     this is called =ensureRoundAndSyncUpMSpec.Contract=.

     The main proof effort is in showing the weakest precondition of =Contract=
     for =ensureRoundAndSyncUpM=. This is ~contract'​~ below, which we break up
     into smaller pieces to discuss.

    #+begin_src agda
    contract'
      : LBFT-weakestPre (ensureRoundAndSyncUpM now messageRound syncInfo author helpRemote) Contract pre
    proj₁ (contract' ._ refl) _ =
      mkContract id refl refl vng outqcs qcPost
      where
        vng : VoteNotGenerated pre pre true
        vng = mkVoteNotGenerated refl refl

        outqcs : QCProps.OutputQc∈RoundManager [] pre
        outqcs = QCProps.NoMsgs⇒OutputQc∈RoundManager [] pre refl

        qcPost : QCProps.∈Post⇒∈PreOr _ pre pre
        qcPost qc = Left

     #+end_src

     The first two arguments to ~contract'​~ come from the bind operation
     (=currentRound ← use (lRoundState ∙ rsCurrentRound)=). The first argument
     (unnamed, given as an underscore) has type =Round= and the second argument
     is a proof that it is equal to =pre ^∙ lRoundState ∙ rsCurrentRound=.

     - NOTE: By pattern matching on the equality, we reveal the relationship
       between the "alias" variables that =RWST-weakestPre= gives us and the
       preceding computation that generated it (here, =use (lRoundState ∙
       rsCurrentRound)=). This is fine in this case; however, for alias
       variables generated from complex computations it is usually desirable to
       hold off on using case analysis on the equality proof, since this results
       in substituting the entire expression into the goal.

       You can see the private module =Tutorial= in
       [[file:../LibraBFT/Impl/Consensus/SafetyRules/Properties/SafetyRules.agda]]
       for more details about reading and managing the proof state when using
       the weakest precondition infrastructure.


     After the bind, we have a conditional operation, so the goal becomes
     showing a product of proofs --- one each for the ~then~ and ~else~
     branches. The code listing above is for the ~then~ branch, which is a
     non-error early exit. The second underscore is an anonymous proof that the
     conditional evaluated to true (for safety, we do not need this evidence).

     In the local proof =outqcs=, we use one of the many utility lemmas defined
     in [[file:../LibraBFT/Impl/Properties/Util.agda]] designed to help glue
     contracts of different peer handlers together and deal with many common
     cases. For =outqcs=, we are in a situation where we have generated *no*
     messages. One of the properties in the contract is that any quorum
     certificate found in the output came from the round manager, and the lemma
     =QCProps.NoMsgs⇒OutputQc∈RoundManager= proves that if there are no output
     messages (but maybe some logging messages), then this universal statement
     holds vacuously.

     #+begin_src agda
    proj₂ (contract' ._ refl) mrnd≥crnd = contract-step₁
      where
      contract-step₁ : LBFT-weakestPre step₁ Contract pre
      contract-step₁ = syncUpMSpec.contract now syncInfo author helpRemote pre Post contract-step₁'
        where
        Post = RWST-weakestPre-ebindPost unit (const step₂) Contract
     #+end_src

     For the =else= branch, we are given evidence that the condition evaluated
     to =false=. The code then proceeds to =step₁=, so the proof now must show
     the weakest precondition of =Contract= for =step₁=.

     At this point, the code calls =syncUpM=; similarly, the proof of the
     contract for =ensureRoundAndSyncUpM= invokes the contract for =syncUpM=.
     The type of =syncUpMSpec.contract now syncInfo author helpRemote pre= is:

     #+begin_src agda
     ∀ Post → RWST-Post-⇒ (syncUpMSpec.Contract now syncInfo author helpRemote) Post
     → LBFT-weakestPre (syncUpM now syncInfo author helpRemote) Post pre
     #+end_src

     With the local definition of =Post= as =RWST-weakestPre-ebindPost unit
     (const step₂) Contract= (because the call to =syncUpM= is followed by =∙?∙
     λ _ → step₂=, where =∙?∙= is an alias for =RWST-ebind=), we now know what
     the type of ~contract-step₁'​~ should be --- and so below, we can choose to
     omit it using an underscore, shown below in the definition of
     ~contract-step₁'​~.

     #+begin_src agda
        contract-step₁' : _
        contract-step₁' (Left  _   ) st outs con =
          mkContract SU.rmInv SU.noEpochChange SU.noVoteOuts SU.noVote SU.outQcs∈RM SU.qcPost
          where
          module SU = syncUpMSpec.Contract con
        contract-step₁' (Right unit) st outs con = contract-step₂
          where
          module SU = syncUpMSpec.Contract con

          noVoteOuts' : NoVotes (outs ++ [])
          noVoteOuts' = ++-NoVotes outs [] SU.noVoteOuts refl

          outqcs : QCProps.OutputQc∈RoundManager (outs ++ []) st
          outqcs = QCProps.++-OutputQc∈RoundManager{rm = st} SU.outQcs∈RM
                     (QCProps.NoMsgs⇒OutputQc∈RoundManager [] st refl)

          contract-step₂ : Post (Right unit) st outs
          proj₁ (contract-step₂ ._ refl ._ refl) _ =
            mkContract SU.rmInv SU.noEpochChange noVoteOuts' SU.noVote
              outqcs SU.qcPost
          proj₂ (contract-step₂ ._ refl ._ refl) _ =
            mkContract SU.rmInv SU.noEpochChange noVoteOuts' SU.noVote
              outqcs SU.qcPost
    #+end_src

    ~contract-step₁'​~ proceeds by inspecting the result returned by =syncUpM=.
    Focusing on the success case (=Right unit=), the code continues on to
    =step₂=, and the proof follows by defining =contract-step₂=. Note the
    following local bindings and definitions.

    - =st= and ~outs~ are, respectively, the post-state and outputs of executing =syncUpM=
      with state =pre=
    - =con= is the proof of the contract for =syncUpM=. To make accessing the
      individual fields of =con= more convenient, we make a local module
      definition =SU=.

    - =SU.noVoteOuts= tells us there are not vote messages in =outs=, but our
      obligation is to show there are no vote messages in =outs ++ []=.

      Here we could prove ~noVoteOuts'​~ by rewriting with =++-identityʳ=. In
      general, if we have two lists which have been proven to not contain a
      certain type of message (e.g., a vote), then you can use the lemma
      =++-NoneOfKind= in [[file:../LibraBFT/Impl/Properties/Util.agda]]. For
      readability, several instances of this lemma (such as =++-NoVotes=) are
      also defined.

    - Similarly, =SU.outQcs∈RM= tells us that all quorum certificates appearing
      in =outs= come from the round manager =st=, but our obligation is to show
      that this property holds for =outs ++ []=. The lemma
      =QCProps.++-OutputQc∈RoundManager= lets us conclude that if this property
      holds for two lists, then it holds for their concatenation.


    Finally, in =contract-step₂=, the first =._ refl= pair corresponds to the
    =Unit= returned =syncUpM=, and the second pair corresponds to the variable
    ~currentRound'​~ in the peer handler code. When we reach the conditional, we
    prove the two obligations the weakest precondition infrastructure generates
    for us --- which finishes the proof.

*** Using =abstract= blocks

    When completely normalized (i.e., evaluated as much as they can be by Agda's
    typechecker), many peer handler functions are *quite* large. That means
    there can be quite a lot of clutter to read through while proving. One way
    to reduce this is by using Agda's =abstract= blocks, which prevent Agda from
    unrolling a definition beyond that block.

    =processProposalMsgM= (an external entry point to =RoundManager.agda=) is an
    example of this.

    #+begin_src agda
abstract
  processProposalMsgM = processProposalMsgM.step₀

  processProposalMsgM≡ : processProposalMsgM ≡ processProposalMsgM.step₀
  processProposalMsgM≡ = refl
    #+end_src

    The defintion of =processProposalMsgM.step₀= /is/ visible in other contexts,
    so =processProposalMsgM≡= is used by the proof of the contract for
    =processProposalMsgM= (see
    [[file:../LibraBFT/Impl/Consensus/RoundManager/Properties.agda]]) to transfer a
    property about =processProposalMsgM.step₀= to =processProposalMsgM=.

    #+begin_src agda
    contract' : LBFT-weakestPre (processProposalMsgM now pm) Contract pre
    contract' rewrite processProposalMsgM≡ = contract
      where
      contract : LBFT-weakestPre step₀ Contract pre
    #+end_src

    Note that after the rewrite, the expected type for the right-hand side of
    ~contract'​~ is not =LBFT-weakestPre step₀ Contract pre= but unrolls the
    full definition of =step₀=. This is a quirk of how =rewrite= (and =with= in
    general) behaves in Agda.

    At the time of writing, there is no set discipline for when to use
    =abstract= blocks. Conceivably, they could be used for *every* function,
    since this would greatly improve the readability of the proof state for any
    peer handler contract proof. This is especially true in the instances where
    =with= or =rewrite= are used, which irrevocably normalize the proof state in
    an attempt to abstract over the given expression in both the goal type and
    the type of (non-parameter) variables in context.


* Peer handler code
** Type classes for branching operations

   Peer handler code written in both the =LBFT= and =Either ErrLog= monads use
   branching operations on variables of type Bool​, Maybe, or Either. To take
   advantage of the weakest precondition machinery, we want to use the
   constructors for the datatype (=RWST= or =EitherD=). However, for
   readability it is desirable to use the same name for the operation that
   performs e.g. case analysis on a boolean value.

   To that end, [[file:../LibraBFT/ImplShared/Util/Dijkstra/Syntax.agda]] defines
   three Agda "typeclasses" --- =MonadIfD=, =MonadMaybeD=, and =MonadEitherD=.
   Of these, =MonadEitherD= deserves some elaboration.

*** =EitherLike=

   Peer handler code written in the =Either ErrLog= monad in Haskell is generally
   written in the =EitherD ErrLog= monad. To facilitate writing code
   to operate on both =Either= or =EitherD=, ~LibraBFT.Prelude~ defines a
   typeclass =EitherLike=.

   #+begin_src agda
 -- Utility to make passing between `Either` and `EitherD` more convenient
 record EitherLike {ℓ₁ ℓ₂ ℓ₃} (E : Set ℓ₁ → Set ℓ₂ → Set ℓ₃) : Set (ℓ+1 (ℓ₁ ℓ⊔ ℓ₂ ℓ⊔ ℓ₃)) where
   field
     fromEither : ∀ {A : Set ℓ₁} {B : Set ℓ₂} → Either A B → E A B
     toEither   : ∀ {A : Set ℓ₁} {B : Set ℓ₂} → E A B → Either A B
 open EitherLike ⦃ ... ⦄ public
   #+end_src

   With this and =MonadEitherD=, we can define operations for branching over
   anything that is =EitherLike=.

**** =MonadEitherD= and =eitherSD=
#+begin_src agda
record MonadEitherD {ℓ₁ ℓ₂ : Level} (M : Set ℓ₁ → Set ℓ₂) : Set (ℓ₂ ℓ⊔ ℓ+1 ℓ₁) where
  field
    ⦃ monad ⦄ : Monad M
    eitherSD : ∀ {E A B : Set ℓ₁} → Either E A → (E → M B) → (A → M B) → M B

open MonadEitherD ⦃ ... ⦄ public hiding (eitherSD)
#+end_src

     The Agda typeclass =MonadEitherD= allows us to give a single name for an
     operation that acts the same as =eitherS= in the Haskell prototype.
     When we open =MonadEitherD=, we hide =eitherSD= so that we can define a
     version in which the first (non-implicit) argument is anything that is
     =EitherLike=.

#+begin_src agda
eitherSD
  : ∀ {ℓ₁ ℓ₂ ℓ₃} {M : Set ℓ₁ → Set ℓ₂} ⦃ med : MonadEitherD M ⦄ →
    ∀ {EL : Set ℓ₁ → Set ℓ₁ → Set ℓ₃} ⦃ _ : EitherLike EL ⦄ →
    ∀ {E A B : Set ℓ₁} → EL E A → (E → M B) → (A → M B) → M B
eitherSD ⦃ med = med ⦄ e f₁ f₂ = MonadEitherD.eitherSD med (toEither e) f₁ f₂
#+end_src

**** =EitherD= and monadic bind

      A wrinkle in this story is the monadic bind operation. When writing ~m >>= f~
      in the =EitherD ErrLog= monad, =f= must return something of the form
      =EitherD ErrLog B=, and similarly for the =Either ErrLog= monad.

      At the time of writing, the recommended approach is to have different
      variants for different contexts in which an error-throwing peer handler
      might be used. This process is facilitated and streamlined by the
      ~EitherLike~ type and friends in ~LibraBFT.Prelude~.

      Briefly, the idea is to write the steps in =EitherD=, and then create
      additional variants as needed for any type for which there is an ~EitherLike~
      instance by using ~toEither~ and ~fromEither~.  By using ~EL-func~ and following
      a convention of creating multiple variants using ~toEither~ and ~fromEither~
      and specifying one of them as the default, we can avoid repeating type
      signatures, minimize explicit usage of variants (e.g., by adding ~.E~ or ~.D)~.

      Here is an example for =insertQuorumCertE=.

        #+begin_src agda
module insertQuorumCertE (qc : QuorumCert) (bt0 : BlockTree) where
  -- Define the type of insertQuorumCertE for an arbitrary EitherLike (EL)
  VariantFor : ∀ {ℓ} EL → EL-func {ℓ} EL
  VariantFor EL = EL ErrLog (BlockTree × List InfoLog)

  ...

  step₀ = -- A variant in EitherD (inferred from use of toEither to define E below)
    case safetyInvariant of λ where
      (Left  e)    → LeftD e
      (Right unit) → step₁ blockId

  step₁ blockId =
        maybeSD (btGetBlock blockId bt0) (LeftD fakeErr) $ step₂ blockId 

  step₂ blockId block =
        maybeSD (bt0 ^∙ btHighestCertifiedBlock) (LeftD fakeErr) $ step₃ blockId block

  step₃ blockId block hcb =
        ifD ((block ^∙ ebRound) >? (hcb ^∙ ebRound))
        then
          ...

  E : VariantFor Either  -- Use toEither to create a variant for Either
  E = toEither step₀

  D : VariantFor EitherD -- Use fromEither to create another variant for EitherD
  D = fromEither E

insertQuorumCertE = insertQuorumCertE.E  -- Define which variant is used by default,
                                         -- based on frequency and context of usage.
                                         -- In this case, we choose the .E variant because
                                         -- insertQuorumCertE is called in 
        #+end_src
      The =E= variant runs the =EitherD= defined by ==step₀== (for =EitherD=, =toEither= is implemented with
      =EitherD-run=).  The =D= variant can be used by other =EitherD= functions.

      Note that this third variant (=D=) is not the same as the first (=step₀=), even
      though it has the same type. While =step₀= may have many uses of binds and
      branching, the closed normal form of =insertQuorumCertE.D= will only ever be
      an =EitherD-return= or =EitherD-bail=.

      =insertBlockE= provides another example that is interesting as its variants
      are used in a more diverse range of contexts; see comment above the definition
      of ~insertBlockE~ (the function, not the module).

      An alternative to this approach would be to define special syntax for =EitherD ErrLog= peer
      handlers that can bind variables from both =Either ErrLog= and =EitherD
      ErrLog= operations. This would look like:

      #+begin_src agda
syntax EitherD-bindEitherLike m₁ (λ x → m₂) = x ←E m₁ ； m₂
      #+end_src

      This would replace =do=-notation for =EitherD ErrLog= peer handlers.
