{- Byzantine Fault Tolerant Consensus Verification in Agda, version 0.9.

   Copyright (c) 2020, 2021, Oracle and/or its affiliates.
   Licensed under the Universal Permissive License v 1.0 as shown at https://opensource.oracle.com/licenses/upl
-}
open import LibraBFT.Prelude
import      Data.Vec.Relation.Unary.All as Vec-All
import      Data.Fin                    as Fin

-- This module defines the EpochConfigs available in the system, along
-- with a function to add a new EpochConfig and some properties that
-- facilitate proofs across state transitions that add an EpochConfig.

module LibraBFT.Yasm.AvailableEpochs
   (NodeId      : Set)
   (‚Ñì-EC        : Level)
   (EpochConfig : Set ‚Ñì-EC)
   (epoch       : EpochConfig ‚Üí ‚Ñï)
   (authorsN    : EpochConfig ‚Üí ‚Ñï)
 where
 open import LibraBFT.Yasm.Base ‚Ñì-EC EpochConfig epoch authorsN

 fin-lower-to‚Ñï : ‚àÄ{e}(i : Fin (suc e))(prf : e ‚â¢ to‚Ñï i) ‚Üí to‚Ñï (Fin.lower‚ÇÅ i prf) ‚â° to‚Ñï i
 fin-lower-to‚Ñï {zero} zero prf = ‚ä•-elim (prf refl)
 fin-lower-to‚Ñï {suc e}  zero prf = refl
 fin-lower-to‚Ñï {suc e} (suc i) prf = cong suc (fin-lower-to‚Ñï i (prf ‚àò cong suc))

 to‚Ñï-correct : ‚àÄ{n}(i : Fin n) ‚Üí to‚Ñï i < n
 to‚Ñï-correct zero = s‚â§s z‚â§n
 to‚Ñï-correct (suc i) = s‚â§s (to‚Ñï-correct i)

 to‚Ñï-inject‚ÇÅ-‚â° : ‚àÄ{n}(i : Fin n) ‚Üí to‚Ñï i ‚â° to‚Ñï (Fin.inject‚ÇÅ i)
 to‚Ñï-inject‚ÇÅ-‚â° zero = refl
 to‚Ñï-inject‚ÇÅ-‚â° (suc i) = cong suc (to‚Ñï-inject‚ÇÅ-‚â° i)

 lower‚ÇÅ-inject‚ÇÅ-id : ‚àÄ{n}(i : Fin n)(prf : n ‚â¢ to‚Ñï (Fin.inject‚ÇÅ i)) ‚Üí Fin.lower‚ÇÅ (Fin.inject‚ÇÅ i) prf ‚â° i
 lower‚ÇÅ-inject‚ÇÅ-id zero prf = refl
 lower‚ÇÅ-inject‚ÇÅ-id (suc i) prf = cong suc (lower‚ÇÅ-inject‚ÇÅ-id i (prf ‚àò cong suc))

 from‚Ñï-‚â§-step-natural : ‚àÄ{n m}(prf : n < m) ‚Üí from‚Ñï< (‚â§-step prf) ‚â° Fin.inject‚ÇÅ (from‚Ñï< prf)
 from‚Ñï-‚â§-step-natural (s‚â§s z‚â§n) = refl
 from‚Ñï-‚â§-step-natural (s‚â§s (s‚â§s prf)) = cong suc (from‚Ñï-‚â§-step-natural (s‚â§s prf))


 Vec-All-lookup‚àòtabulate : ‚àÄ{n}{A : Set}{v : Vec A n}{‚Ñì : Level}{P : A ‚Üí Set ‚Ñì}
                         ‚Üí (f : (x : Fin n) ‚Üí P (Vec-lookup v x))(i : Fin n)
                         ‚Üí Vec-All.lookup {P = P} i (Vec-All.tabulate {xs = v} f) ‚â° f i
 Vec-All-lookup‚àòtabulate {v = v‚ÇÄ ‚à∑ vs} f zero = refl
 Vec-All-lookup‚àòtabulate {v = v‚ÇÄ ‚à∑ vs} f (suc i) = Vec-All-lookup‚àòtabulate (f ‚àò suc) i

 subst-elim : {A : Set}{‚Ñì : Level}(P : A ‚Üí Set ‚Ñì){a‚ÇÄ a‚ÇÅ : A}
            ‚Üí (prf : a‚ÇÄ ‚â° a‚ÇÅ)(x : P a‚ÇÅ)
            ‚Üí subst P prf (subst P (sym prf) x) ‚â° x
 subst-elim _ refl x = refl

 -- Available epochs consist of a vector of EpochConfigs with
 -- the correct epoch ids.
 AvailableEpochs : ‚Ñï ‚Üí Set ‚Ñì-EC
 AvailableEpochs = Vec-All (EpochConfigFor ‚àò to‚Ñï) ‚àò Vec-allFin

 lookup : ‚àÄ{e} ‚Üí AvailableEpochs e ‚Üí (ix : Fin e) ‚Üí EpochConfigFor (to‚Ñï ix)
 lookup ùìîs ix =  subst EpochConfigFor (cong to‚Ñï (Vec-lookup‚àòtabulate id ix)) (Vec-All-lookup ix ùìîs)

 lookup' : ‚àÄ{e} ‚Üí AvailableEpochs e ‚Üí Fin e ‚Üí EpochConfig
 lookup' ùìîs ix = EpochConfigFor.epochConfig (lookup ùìîs ix)

 lookup'' : ‚àÄ{e m} ‚Üí AvailableEpochs e ‚Üí m < e ‚Üí EpochConfig
 lookup'' ùìîs ix = lookup' ùìîs (from‚Ñï< ix)

 lookup-ùìîs-injective : ‚àÄ {e m1 m2} ‚Üí (ùìîs : AvailableEpochs e)
                     ‚Üí (p1 : m1 < e) ‚Üí (p2 : m2 < e) ‚Üí m1 ‚â° m2
                     ‚Üí lookup'' ùìîs p1 ‚â° lookup'' ùìîs p2
 lookup-ùìîs-injective {e} ùìîs p1 p2 refl = cong (lookup'' ùìîs) (<-irrelevant p1 p2)

 -- The /transpose/ of append is defined by the semantics of a lookup
 -- over an append; the /append/ function below is defined by tabulating this
 -- monster.
 append·µÄ : ‚àÄ{e} ‚Üí EpochConfigFor e ‚Üí AvailableEpochs e ‚Üí (i : Fin (suc e)) ‚Üí EpochConfigFor (to‚Ñï i)
 append·µÄ {e} ecf al i with e ‚âü‚Ñï to‚Ñï i
 ...| yes e‚â°i = subst EpochConfigFor e‚â°i ecf
 ...| no  prf = subst EpochConfigFor
                      (trans (cong to‚Ñï (Vec-lookup‚àòtabulate id (Fin.lower‚ÇÅ i prf)))
                             (fin-lower-to‚Ñï i prf))
                      (Vec-All-lookup (Fin.lower‚ÇÅ i prf) al)

 -- Append is defined by tabulating append·µÄ
 append : ‚àÄ{e} ‚Üí EpochConfigFor e ‚Üí AvailableEpochs e ‚Üí AvailableEpochs (suc e)
 append {e} ecf al = Vec-All.tabulate
    (Œª i ‚Üí subst (EpochConfigFor) (sym (cong to‚Ñï (Vec-lookup‚àòtabulate id i))) (append·µÄ ecf al i))

 lookup-append-lemma
   : ‚àÄ{e}(ùìîs : AvailableEpochs e)(ùìî : EpochConfigFor e)(ix : Fin (suc e))
   ‚Üí lookup (append ùìî ùìîs) ix ‚â° append·µÄ ùìî ùìîs ix
 lookup-append-lemma al ecf ix
   rewrite Vec-All-lookup‚àòtabulate
          {v = zero ‚à∑ Vec-tabulate suc}
          {P = EpochConfigFor ‚àò to‚Ñï}
          (Œª i ‚Üí subst EpochConfigFor (sym (cong to‚Ñï (Vec-lookup‚àòtabulate id i))) (append·µÄ ecf al i)) ix
        = subst-elim EpochConfigFor (cong to‚Ñï (Vec-lookup‚àòtabulate id ix)) (append·µÄ ecf al ix)

 -- Ok, let's bring in the big guns
 import Relation.Binary.HeterogeneousEquality as HE

 append-inject‚ÇÅ-lemma
   : ‚àÄ{e}(ùìîs : AvailableEpochs e)(ùìî : EpochConfigFor e)(ix : Fin e)
   ‚Üí append·µÄ ùìî ùìîs (Fin.inject‚ÇÅ ix)
   ‚âÖ lookup ùìîs ix
 append-inject‚ÇÅ-lemma {e} ùìîs ùìî ix
   with e ‚âü‚Ñï (to‚Ñï (Fin.inject‚ÇÅ ix))
 ...| yes abs = ‚ä•-elim (<‚áí‚â¢ (to‚Ñï-correct ix) (trans (to‚Ñï-inject‚ÇÅ-‚â° ix) (sym abs)))
 ...| no  prf = HE.trans (HE.‚â°-subst-removable EpochConfigFor
                           (trans (cong to‚Ñï (Vec-lookup‚àòtabulate id (Fin.lower‚ÇÅ (Fin-inject‚ÇÅ ix) prf)))
                                  (fin-lower-to‚Ñï (Fin.inject‚ÇÅ ix) prf))
                           (Vec-All-lookup (Fin.lower‚ÇÅ (Fin.inject‚ÇÅ ix) prf) ùìîs))
               (HE.trans (‚âÖ-cong (Œª P ‚Üí Vec-All-lookup P ùìîs) (HE.‚â°-to-‚âÖ (lower‚ÇÅ-inject‚ÇÅ-id ix prf)))
                         (HE.sym (HE.‚â°-subst-removable EpochConfigFor
                                   (cong to‚Ñï (Vec-lookup‚àòtabulate id ix))
                                   (Vec-All-lookup ix ùìîs))))

 lookup''-‚â§-step-lemma
   : ‚àÄ{e m}(ùìîs : AvailableEpochs e)(ùìî : EpochConfigFor e)(prf : m < e)
   ‚Üí lookup'' (append ùìî ùìîs) (‚â§-step prf) ‚â° lookup'' ùìîs prf
 lookup''-‚â§-step-lemma al ecf prf
   rewrite from‚Ñï-‚â§-step-natural prf
         | lookup-append-lemma al ecf (Fin.inject‚ÇÅ (from‚Ñï< prf))
         = ECF-cong (append-inject‚ÇÅ-lemma al ecf (from‚Ñï< prf))
                    (sym (to‚Ñï-inject‚ÇÅ-‚â° (from‚Ñï< prf)))
   where
    ECF-cong : ‚àÄ{e e'}{ef : EpochConfigFor e}{ef' : EpochConfigFor e'}
             ‚Üí ef ‚âÖ ef' ‚Üí e ‚â° e'
             ‚Üí EpochConfigFor.epochConfig ef ‚â° EpochConfigFor.epochConfig ef'
    ECF-cong {e} {e'} {ef} {ef'} HE.refl refl = refl
