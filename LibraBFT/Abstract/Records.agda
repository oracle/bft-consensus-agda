{- Byzantine Fault Tolerant Consensus Verification in Agda, version 0.9.

   Copyright (c) 2020, 2021, Oracle and/or its affiliates.
   Licensed under the Universal Permissive License v 1.0 as shown at https://opensource.oracle.com/licenses/upl
-}
open import LibraBFT.Prelude
open import LibraBFT.Lemmas
open import LibraBFT.Base.Types
open import LibraBFT.Abstract.Types.EpochConfig
open        WithAbsVote

-- This module defines abstract records (the initial or "genesis" record, blocks, and quorum
-- certificates), along with related definitions and properties.

module LibraBFT.Abstract.Records
    (UID    : Set)
    (_‚âüUID_ : (u‚ÇÄ u‚ÇÅ : UID) ‚Üí Dec (u‚ÇÄ ‚â° u‚ÇÅ)) -- Needed to prove ‚âüBlock and ‚âà?QC
    (NodeId : Set)
    (ùìî : EpochConfig UID NodeId)
    (ùì• : VoteEvidence UID NodeId ùìî)
    where
  open import LibraBFT.Abstract.Types UID NodeId
  open        EpochConfig ùìî

  -- Abstract blocks do /not/ need to carry the state hash. Since the
  -- state hash of a concrete block is supposed to be hashed in the
  -- UID of an abstract one; the connection between states is implicit.
  -- Our proofs all work modulo injectivity of UID anyway.
  record Block  : Set where
    constructor Block‚àônew
    field
      bRound   : Round
      bId      : UID
      bPrevQC  : Maybe UID -- 'nothing' indicates it extends the genesis block.
  open Block public

  Block-Œ∑ : {b b' : Block}
         ‚Üí bRound b ‚â° bRound b'
         ‚Üí bId b ‚â° bId b'
         ‚Üí bPrevQC b ‚â° bPrevQC b'
         ‚Üí b ‚â° b'
  Block-Œ∑ refl refl refl = refl

  -- We define a Vote as an AbsVoteData applied
  -- to the correct parameters; This helps in defining
  -- and manipulating the ùì• vote evidence predicate.
  Vote : Set
  Vote = AbsVoteData UID NodeId ùìî

  vRound      : Vote ‚Üí Round
  vRound      = abs-vRound

  vMember     : Vote ‚Üí EpochConfig.Member ùìî
  vMember     = abs-vMember

  vBlockUID   : Vote ‚Üí UID
  vBlockUID   = abs-vBlockUID

  Vote-Œ∑ : {v v' : Vote}
         ‚Üí vRound v ‚â° vRound v' ‚Üí vMember v ‚â° vMember v'
         ‚Üí vBlockUID v ‚â° vBlockUID v'
         ‚Üí v ‚â° v'
  Vote-Œ∑ refl refl refl = refl

  -- * Quorum Certificates
  --
  -- A valid quorum certificate contains at least 'QuorumSize ec'
  -- votes from different authors.
  record QC : Set where
   constructor QC‚àônew
   field
     qRound         : Round
     qCertBlockId   : UID -- this is the id for the block it certifies.
     qVotes         : List Vote
     -- The voters form a quorum
     qVotes-C1      : IsQuorum (List-map vMember qVotes)
     -- All votes are for the same blockId
     qVotes-C2      : All (Œª v ‚Üí vBlockUID v ‚â° qCertBlockId) qVotes
     -- Likewise for rounds
     qVotes-C3      : All (Œª v ‚Üí vRound v ‚â° qRound) qVotes
     -- And we have evidence for all votes
     qVotes-C4      : All ùì• qVotes
  open QC public

  ------------------------
  -- QC's make a setoid --
  ------------------------

  -- Two QC's are said to be equivalent if they have the same ID;
  -- that is, they certify the same block. As we are talking about
  -- /abstract/ QCs, we have proofs that both have at least QuorumSize
  -- votes for /the same block/!
  --
  -- It might be tempting to want qRound q‚ÇÄ ‚â° qRound q‚ÇÅ in here,
  -- but the proof of ‚Üê-‚âàRec in LibraBFT.Abstract.Records.Extends
  -- would be impossible.
  _‚âàQC_ : QC ‚Üí QC ‚Üí Set
  q‚ÇÄ ‚âàQC q‚ÇÅ = qCertBlockId q‚ÇÄ ‚â° qCertBlockId q‚ÇÅ

  _‚âàQC?_ : (q‚ÇÄ q‚ÇÅ : QC) ‚Üí Dec (q‚ÇÄ ‚âàQC q‚ÇÅ)
  q‚ÇÄ ‚âàQC? q‚ÇÅ with qCertBlockId q‚ÇÄ ‚âüUID qCertBlockId q‚ÇÅ
  ...| yes refl = yes refl
  ...| no  neq  = no Œª x ‚Üí neq x

  ‚âàQC-refl : Reflexive _‚âàQC_
  ‚âàQC-refl = refl

  ‚âàQC-sym : Symmetric _‚âàQC_
  ‚âàQC-sym refl = refl

  ‚âàQC-trans : Transitive _‚âàQC_
  ‚âàQC-trans refl x = x

  QC-setoid : Setoid ‚Ñì0 ‚Ñì0
  QC-setoid = record
    { Carrier       = QC
    ; _‚âà_           = _‚âàQC_
    ; isEquivalence = record
        { refl  = Œª {q}         ‚Üí ‚âàQC-refl {q}
        ; sym   = Œª {q} {u}     ‚Üí ‚âàQC-sym {q} {u}
        ; trans = Œª {q} {u} {l} ‚Üí ‚âàQC-trans {q} {u} {l}
        }
    }

  -- Accessing common fields in different Records types is a nuissance; yet, Blocks,
  -- votes and QC's all have three important common fields: author, round and maybe the
  -- ID of a previous record.  Therefore we declare a type-class that provide "getters"
  -- for commonly used fields.
  record HasRound (A : Set) : Set where
    constructor is-librabft-record
    field
      getRound  : A ‚Üí Round
  open HasRound {{...}} public

  instance
    block-is-record : HasRound Block
    block-is-record = is-librabft-record bRound

    vote-is-record : HasRound Vote
    vote-is-record = is-librabft-record vRound

    qc-is-record : HasRound QC
    qc-is-record = is-librabft-record qRound

  _‚âüBlock_ : (b‚ÇÄ b‚ÇÅ : Block) ‚Üí Dec (b‚ÇÄ ‚â° b‚ÇÅ)
  b‚ÇÄ ‚âüBlock b‚ÇÅ
     with bRound b‚ÇÄ ‚âü bRound b‚ÇÅ
  ...| no neq = no Œª x ‚Üí neq (cong bRound x)
  ...| yes r‚â°
     with (bId b‚ÇÄ) ‚âüUID (bId b‚ÇÅ)
  ...| no neq = no Œª x ‚Üí neq (cong bId x)
  ...| yes i‚â°
     with Maybe-‚â°-dec {A = UID} _‚âüUID_ (bPrevQC b‚ÇÄ) (bPrevQC b‚ÇÅ)
  ...| no neq = no Œª x ‚Üí neq (cong bPrevQC x)
  ...| yes p‚â° = yes (Block-Œ∑ r‚â° i‚â° p‚â°)

  qcVotes : QC ‚Üí List Vote
  qcVotes = qVotes

  -- Now we can state whether an author has voted in a given QC.
  _‚ààQC_  : Member ‚Üí QC ‚Üí Set
  a ‚ààQC qc = Any (Œª v ‚Üí vMember v ‚â° a) (qcVotes qc)

  ‚ààQC-Member : ‚àÄ{Œ±}(q : QC)(v : Œ± ‚ààQC q)
             ‚Üí Œ± ‚â° vMember (List-lookup (qcVotes q) (Any-index v))
  ‚ààQC-Member {Œ±} q v = aux v
    where
      aux : ‚àÄ{vs}(p : Any (Œª v ‚Üí vMember v ‚â° Œ±) vs)
          ‚Üí Œ± ‚â° vMember (List-lookup vs (Any-index p))
      aux (here px) = sym px
      aux (there p) = aux p

  -- Gets the vote of a ‚ààQC
  -- TODO-1: make q explicit; a implicit
  ‚ààQC-Vote : {a : Member} (q : QC) ‚Üí (a ‚ààQC q) ‚Üí Vote
  ‚ààQC-Vote q a‚ààq = Any-lookup a‚ààq

  ‚ààQC-Vote-correct : ‚àÄ q ‚Üí {a : Member} ‚Üí (p : a ‚ààQC q)
                   ‚Üí (‚ààQC-Vote {a} q p) ‚àà qcVotes q
  ‚ààQC-Vote-correct q a‚ààq = Any-lookup-correct a‚ààq

  -- Same vote in two QC's means the QCs are equivalent
  ‚ààQC-Vote-‚âà : {v : Vote}{q q' : QC}
             ‚Üí v ‚àà qcVotes q ‚Üí v ‚àà qcVotes q'
             ‚Üí q ‚âàQC q'
  ‚ààQC-Vote-‚âà {v} {q} {q'} vq vq'
    = trans (sym (All-lookup (qVotes-C2 q)  vq))
                 (All-lookup (qVotes-C2 q') vq')

  -- A record is either one of the types introduced above or the initial/genesis record.
  data Record : Set where
    I :             Record
    B : Block     ‚Üí Record
    Q : QC        ‚Üí Record

  -- Records are equivalent if and only if they are either not
  -- QCs and propositionally equal or they are equivalent qcs.
  data _‚âàRec_ : Record ‚Üí Record ‚Üí Set where
    eq-I :                        I    ‚âàRec I
    eq-Q : ‚àÄ{q‚ÇÄ q‚ÇÅ} ‚Üí q‚ÇÄ ‚âàQC q‚ÇÅ ‚Üí Q q‚ÇÄ ‚âàRec Q q‚ÇÅ
    eq-B : ‚àÄ{b‚ÇÄ b‚ÇÅ} ‚Üí b‚ÇÄ  ‚â°  b‚ÇÅ ‚Üí B b‚ÇÄ ‚âàRec B b‚ÇÅ

  ‚âàRec-refl : Reflexive _‚âàRec_
  ‚âàRec-refl {I}   = eq-I
  ‚âàRec-refl {B x} = eq-B refl
  ‚âàRec-refl {Q x} = eq-Q (‚âàQC-refl {x})

  ‚âàRec-sym : Symmetric _‚âàRec_
  ‚âàRec-sym {I}         eq-I       = eq-I
  ‚âàRec-sym {B x}       (eq-B prf) = eq-B (sym prf)
  ‚âàRec-sym {Q x} {Q y} (eq-Q prf) = eq-Q (‚âàQC-sym {x} {y} prf)

  ‚âàRec-trans : Transitive _‚âàRec_
  ‚âàRec-trans {I}                eq-I      eq-I      = eq-I
  ‚âàRec-trans {B x}             (eq-B p‚ÇÄ) (eq-B p‚ÇÅ) = eq-B (trans p‚ÇÄ p‚ÇÅ)
  ‚âàRec-trans {Q x} {Q y} {Q z} (eq-Q p‚ÇÄ) (eq-Q p‚ÇÅ) = eq-Q (‚âàQC-trans {x} {y} {z} p‚ÇÄ p‚ÇÅ)

  Rec-setoid : Setoid ‚Ñì0 ‚Ñì0
  Rec-setoid = record
    { Carrier       = Record
    ; _‚âà_           = _‚âàRec_
    ; isEquivalence = record
        { refl  = Œª {q}         ‚Üí ‚âàRec-refl {q}
        ; sym   = Œª {q} {u}     ‚Üí ‚âàRec-sym {q} {u}
        ; trans = Œª {q} {u} {l} ‚Üí ‚âàRec-trans {q} {u} {l}
        }
    }

  -- Record unique ids carry whether the abstract id was assigned
  -- to a QC or a Block; this can be useful to avoid having to deal
  -- with 'blockId ‚âü initialAgreedID' in order to decide whether
  -- a block is the genesis block or not.
  data TypedUID : Set where
    id-I   : TypedUID
    id-B‚à®Q : UID -> TypedUID

  id-I‚â¢id-B‚à®Q : ‚àÄ{id} ‚Üí id-I ‚â° id-B‚à®Q id ‚Üí ‚ä•
  id-I‚â¢id-B‚à®Q ()

  id-B‚à®Q-inj : ‚àÄ{u‚ÇÅ u‚ÇÇ} ‚Üí id-B‚à®Q u‚ÇÅ ‚â° id-B‚à®Q u‚ÇÇ ‚Üí u‚ÇÅ ‚â° u‚ÇÇ
  id-B‚à®Q-inj refl = refl

  uid : Record ‚Üí TypedUID
  uid I     = id-I
  uid (B b) = id-B‚à®Q (bId   b)
  uid (Q q) = id-B‚à®Q (qCertBlockId q)

  -- Each record has a round
  round : Record ‚Üí Round
  round I     = 0
  round (B b) = getRound b
  round (Q q) = getRound q
