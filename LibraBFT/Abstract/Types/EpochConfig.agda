{- Byzantine Fault Tolerant Consensus Verification in Agda, version 0.9.

   Copyright (c) 2021, Oracle and/or its affiliates.
   Licensed under the Universal Permissive License v 1.0 as shown at https://opensource.oracle.com/licenses/upl
-}
open import LibraBFT.Prelude
open import LibraBFT.Lemmas
-- TODO-2: The following import should be eliminated and replaced
-- with the necessary module parameters (PK and MetaHonestPK)
open import LibraBFT.Base.PKCS

-- This module brings in the base types used through libra
-- and those necessary for the abstract model.
module LibraBFT.Abstract.Types.EpochConfig
  (UID    : Set)
  (NodeId : Set)
  where

  open import LibraBFT.Base.Types

  -- An epoch-configuration carries only simple data about the epoch; the complicated
  -- parts will be provided by the System, defined below.
  --
  -- The reason for the separation is that we should be able to provide
  -- an EpochConfig from a single peer state.
  record EpochConfig : Set‚ÇÅ where
    constructor EpochConfig‚àônew
    field
      genesisUID : UID
      epoch      : Epoch
      authorsN  : ‚Ñï

    -- The set of members of this epoch.
    Member : Set
    Member = Fin authorsN

    -- There is a partial isomorphism between NodeIds and the
    -- authors participating in this epoch.
    field
      toNodeId  : Member ‚Üí NodeId
      isMember? : NodeId ‚Üí Maybe Member

      nodeid-author-id : ‚àÄ{Œ±}     ‚Üí isMember? (toNodeId Œ±) ‚â° just Œ±
      author-nodeid-id : ‚àÄ{nid Œ±} ‚Üí isMember? nid ‚â° just Œ±
                                  ‚Üí toNodeId Œ± ‚â° nid

      getPubKey : Member ‚Üí PK

      PK-inj : ‚àÄ {m1 m2} ‚Üí getPubKey m1 ‚â° getPubKey m2 ‚Üí m1 ‚â° m2

      IsQuorum : List Member ‚Üí Set

      bft-assumption : ‚àÄ {xs ys}
                     ‚Üí IsQuorum xs ‚Üí IsQuorum ys
                     ‚Üí ‚àÉ[ Œ± ] (Œ± ‚àà xs √ó Œ± ‚àà ys √ó Meta-Honest-PK (getPubKey Œ±))

  open EpochConfig

  module _ (ec : EpochConfig) where
    NodeId-PK-OK : PK ‚Üí NodeId ‚Üí Set
    NodeId-PK-OK pk pid = ‚àÉ[ m ] (toNodeId ec m ‚â° pid √ó getPubKey ec m ‚â° pk)

    NodeId-PK-OK-injective : ‚àÄ {pk pid1 pid2}
                           ‚Üí NodeId-PK-OK pk pid1
                           ‚Üí NodeId-PK-OK pk pid2
                           ‚Üí pid1 ‚â° pid2
    NodeId-PK-OK-injective (m1 , pid1 , pk1) (m2 , pid2 , pk2)
       rewrite PK-inj ec (trans pk1 (sym pk2)) = trans (sym pid1) pid2

  module WithAbsVote (ùìî : EpochConfig) where
    -- The abstract model is connected to the implementaton by means of
    -- 'VoteEvidence'. The record module will be parameterized by a
    -- v of type 'VoteEvidence ùìî UID'; this v will provide evidence
    -- that a given author voted for a given block (identified by the UID)
    -- on the specified round.
    --
    -- When it comes time to instantiate the v above concretely, it will
    -- be something that states that we have a signature from the specified
    -- author voting for the specified block.
    record AbsVoteData : Set where
      constructor AbsVoteData‚àônew
      field
        abs-vRound     : Round
        abs-vMember    : EpochConfig.Member ùìî
        abs-vBlockUID  : UID
    open AbsVoteData public

    AbsVoteData-Œ∑ : ‚àÄ {r1 r2 : Round} {m1 m2 : EpochConfig.Member ùìî} {b1 b2 : UID}
                  ‚Üí r1 ‚â° r2
                  ‚Üí m1 ‚â° m2
                  ‚Üí b1 ‚â° b2
                  ‚Üí AbsVoteData‚àônew r1 m1 b1 ‚â° AbsVoteData‚àônew r2 m2 b2
    AbsVoteData-Œ∑ refl refl refl = refl

    VoteEvidence : Set‚ÇÅ
    VoteEvidence = AbsVoteData ‚Üí Set
